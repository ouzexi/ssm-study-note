<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.atguigu.mybatis.mapper.DynamicSQLMapper">

    <!--
        动态SQL：
        1、if：通过test属性中的表达式判断标签中的内容是否有效（是否会拼接到sql中）
        2、where：
        a.若where标签中有条件成立，会自动生成where关键字
        b.会自动将where标签中内容前多余的and去掉
        c.若where标签中没有任何一个条件成立，则where没有任何功能
        3、trim：
        prefix、suffix：在标签中内容前面或后面添加指定内容
        prefixOverrides、suffixOverrides：在标签中内容前端或后面去掉指定内容
        4、choose、when、otherwise：
        相当于java中的if...else if...elseif
        when：至少设置一个 / otherwise：最多设置一个
        5、foreach：
        collection：设置要循环的数组或集合
        item：用一个字符串表示数组或集合中的每一项数据
        separator：设置每次循环的数据之间的分隔符
        open/close：循环的所有内容以xx开始/结束
        6、sql片段：
        可以记录一段sql，在需要的地方使用include标签进行引用
    -->

    <sql id="empColumns">
        emp_id, emp_name, age, gender, dept_id
    </sql>

<!--    List<Emp> getEmpByCondition(Emp emp); -->
<!--    因为传过来的是实体类对象Emp emp，所以if中test属性直接访问对象的属性如empName -->
    <select id="getEmpByConditionOne" resultType="Emp">
        <!--select * from t_emp where 1 = 1-->
        select <include refid="empColumns"></include> from t_emp where 1 = 1
        <if test="empName != null and empName != ''">
            and emp_name = #{empName}
        </if>
        <if test="age != null and age != ''">
            and age = #{age}
        </if>
        <if test="gender != null and gender != ''">
            and gender = #{gender}
        </if>
    </select>

    <select id="getEmpByConditionTwo" resultType="Emp">
        select * from t_emp
        <where>
            <if test="empName != null and empName != ''">
                emp_name = #{empName}
            </if>
            <if test="age != null and age != ''">
                and age = #{age}
            </if>
            <if test="gender != null and gender != ''">
                and gender = #{gender}
            </if>
        </where>
    </select>

    <select id="getEmpByCondition" resultType="Emp">
        select * from t_emp
        <trim prefix="where" suffixOverrides="and">
            <if test="empName != null and empName != ''">
                emp_name = #{empName}
            </if>
            <if test="age != null and age != ''">
                and age = #{age}
            </if>
            <if test="gender != null and gender != ''">
                and gender = #{gender}
            </if>
        </trim>
    </select>

<!--    List<Emp> getEmpByChoose(Emp emp); -->
<!--    choose标签里面的when类似if...elseif 所以最多一个成立，因此不需要加and
        otherwise类似if...else -->
    <select id="getEmpByChoose" resultType="Emp">
        select * from t_emp
        <where>
            <choose>
                <when test="empName != null and empName != ''">
                    emp_name = #{empName}
                </when>
                <when test="age != null and age != ''">
                    age = #{age}
                </when>
                <when test="gender != null and gender != ''">
                    gender = #{gender}
                </when>
            </choose>
        </where>
    </select>

<!--    void insertMoreEmp(@Param("emps") List<Emp> emps); -->
<!--    批量插入的sql语句为insert into t_emp values(),(),()... -->
<!--    如果void insertMoreEmp(List<Emp> emps);传递的参数emps没用@Param注解，那么mybatis默认接收map的键就是list，值就是集合的值 -->
<!--    所以foreach标签collection属性为list foreach collection="list" -->
    <insert id="insertMoreEmp">
        insert into t_emp values
        <foreach collection="emps" item="emp" separator=",">
            (null, #{emp.empName}, #{emp.age}, #{emp.gender}, null)
        </foreach>
    </insert>

<!--    void deleteMoreEmp(@Param("empIds") Integer[] empIds); -->
<!--    批量删除的sql语句为delete form t_emp where emp_id in (1,2,3,...) -->
<!--    如果声明的方法为void deleteMoreEmp(Integer[] empIds); -->
<!--    传递的参数empIds没用@Param注解，那么mybatis默认接收map的键就是array，值就是数组的值 -->
<!--    foreach属性：index-索引 / open-当前循环的内容以xx开始 / close-当前循环的内容以xx结束 -->
    <delete id="deleteMoreEmp">
        <!--delete from t_emp where emp_id in
        <foreach collection="empIds" item="empId" separator="," open="(" close=")">
            #{empId}
        </foreach>-->

        delete from t_emp where
        <foreach collection="empIds" item="empId" separator="or">
            emp_id = #{empId}
        </foreach>
    </delete>

</mapper>