<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:ontext="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd">
    
    <!--扫描除了控制层的包-->
    <context:component-scan base-package="com.atguigu.ssm">
        <!--通过注解排除扫描-->
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!--引入jdbc.properties-->
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>

    <!--配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"></property>
        <property name="url" value="${jdbc.url}"></property>
        <property name="username" value="${jdbc.username}"></property>
        <property name="password" value="${jdbc.password}"></property>
    </bean>

    <!--配置事务管理器-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--开启事务的注解驱动-->
    <!--相当于一个切面，把事务通知作用于连接点-->
    <!--将使用@Transactional注解标识的方法或类中所有的方法进行事务管理-->
    <tx:annotation-driven transaction-manager="transactionManager" />

    <!--配置SqlSessionFactoryBean，可以直接在Spring的IOC中获取配置SqlSessionFactory-->
    <bean class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--configLocation设置mybatis的核心配置文件的路径-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!--dataSource设置数据源，如果设置了dataSource那么mybatis配置文件的environments标签可以不用了-->
        <property name="dataSource" ref="dataSource"></property>
        <!--typeAliasesPackage设置类型别名所对应的包-->
        <property name="typeAliasesPackage" value="com.atguigu.ssm.pojo"></property>
        <!--configurationProperties设置全局配置-->
        <!--mapperLocations设置映射文件的路径，只有映射文件的包和mapper接口的包不一致时才需要设置-->
        <!--<property name="mapperLocations" value="classpath:mappers/*.xml"></property>-->
        <!--<property name="plugins">
            &lt;!&ndash;长度可变的参数本质就是数组&ndash;&gt;
            <array>
                <bean class="com.github.pagehelper.PageInterceptor"></bean>
            </array>
        </property>-->
    </bean>

    <!--配置mapper接口的扫描，可以将指定包下所有的mapper接口，通过SqlSession创建代理实现类对象，并将这些对象交给ioc容器管理-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!--com.atguigu.ssm.mapper有2层含义表示mapper接口和mapper映射文件所在的包-->
        <property name="basePackage" value="com.atguigu.ssm.mapper"></property>
    </bean>

</beans>